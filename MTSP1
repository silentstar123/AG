%% 多旅行商问题的遗传算法
tic
% 39个城市，4条线路
clear,clc
close all
city_distance=[0	20.3	4.5	1.7	12.9	284.8	20.4	25.4	1.9	28.1	430.5	176.1	41.9	377.6	8.2	174.6	161.5	2.2	11.7	176.1	119.8	27.6	73.4	21	2.7	2.7	6	6	27.5	209.6	145	191.5	193.5	1.8	535.1	505.1	433.6	288.3	643.3	288.3	643.3
20.3	0	24.2	21.9	30.6	265.2	38.1	8.1	21.7	10.6	442.2	186.3	63.3	357.4	17.9	186.2	161.6	22.5	25	187.7	141.3	11.7	80.8	9.3	23	20.6	14.7	24.1	10	190	129.9	202.7	207.4	21.6	510.8	458.4	445.2	268.7	655	268.7	655
4.5	24.2	0	2.9	19.3	287.5	24.4	28	3.5	32.1	432	177.5	44.2	379.1	9.6	175.9	163.1	3.6	13.2	177.5	123.8	37.3	63.3	24.3	3.1	4.3	10	1.7	31.4	212.3	146.5	192.5	197.2	3.4	536.5	448.2	435	289.7	644.7	289.7	644.7
1.7	21.9	2.9	0	14.7	283.5	22.2	33.4	0.6	34.8	429.2	174.8	50	375.7	6.9	173.3	160.2	0.93	10.4	174.8	121.6	34.9	70.7	19.2	1.4	1.4	7.8	4	29.1	208.3	143.8	195.8	192.2	0.49	533.8	445.5	432.3	287	642	287	642
12.9	30.6	19.3	14.7	0	297.3	8	37.1	14.4	42.7	449.4	195	56.5	391.6	19.2	193.4	180.4	15.2	22.8	195	107.4	37.6	47	30.7	15.7	13.3	16.4	18.2	37.9	222.1	163.9	216	214.7	14.3	554	465.7	452.5	300.8	662.1	300.8	662.1
284.8	265.2	287.5	283.5	297.3	0	300.2	263.3	284	257	198.5	233	278	150.8	279.2	233	188.3	283.9	276.2	234.5	395.2	264.6	334.8	267.5	284.1	283.3	282.2	288.3	257.7	118.9	166	246.4	308	283.9	279.9	211.1	199.9	5	462.7	5	462.7
20.4	38.1	24.4	22.2	8	300.2	0	44.6	21.9	53.4	452.7	196.7	63.9	394.8	32.7	196.6	183.6	22.6	38.2	198.2	110.7	40.8	41.8	45	23.1	20.8	23.9	25.6	54.9	225.3	167.2	213.2	217.9	21.7	557	468.9	455.7	304	665.4	1117.8	1479.1
25.4	8.1	28	33.4	37.1	263.3	44.6	0	24.4	7.7	424.3	188.2	63.4	354.1	18	186.7	165.1	24.3	27.3	188.2	144.1	10.8	81.6	8.5	24.5	23.7	19.6	28.5	6.9	186.8	133.5	203.2	207.9	24.3	507.5	440.5	427.4	265.4	637.1	304	665.4
1.9	21.7	3.5	0.6	14.4	284	21.9	24.4	0	29.6	428.9	174.5	40.9	376	6.6	172.9	160	1.3	10.1	174.4	121.3	34.8	70.4	18.9	1.8	1.1	7.5	4.6	28.9	208	143.4	189.4	191.9	0.11	533.3	445.1	432	286.7	641.7	265.4	637.1
28.1	10.6	32.1	34.8	42.7	257	53.4	7.7	29.6	0	419	196.6	73.2	349.1	25.7	196.5	153.3	30.3	34.7	198.1	146.2	8.5	85.8	17.1	30.8	28.5	22.5	31.9	2.6	181.5	121.6	213	215.5	29.4	502.5	435.2	422.1	260.1	632	286.7	641.7
430.5	442.2	432	429.2	449.4	198.5	452.7	424.3	428.9	419	0	282	399.8	85.9	422.6	282.6	306.3	427.3	421.4	282	545.4	425.5	485	434.9	427.4	426.7	428.9	431.7	418.6	251.9	302	274.8	382.2	427.3	117	31.6	3.8	185.9	240.5	260.1	632
176.1	186.3	177.5	174.8	195	233	196.7	188.2	174.5	196.6	282	0	144.6	239.3	167.4	0.95	61.7	172.1	166.2	2.1	290.2	195.2	229.8	179.7	172.3	171.5	173.8	176.5	196.2	159.1	106.4	16.2	101	172.1	393.6	305.5	292.3	234.1	495.6	185.9	240.5
41.9	63.3	44.2	50	56.5	278	63.9	63.4	40.9	73.2	399.8	144.6	0	372.2	45.3	151	140.3	39.7	36.7	152.5	168.4	73.1	108	51.9	39.8	43.6	52.9	42.5	74.1	197.6	116.1	168.6	133.3	40.8	513.6	425.4	412.3	279.1	622	234.1	495.6
377.6	357.4	379.1	375.7	391.6	150.8	394.8	354.1	376	349.1	85.9	239.3	372.2	0	368.7	235	252.4	373.4	367.5	241.9	491.5	354.1	431.1	357	373.5	372.8	375.1	377.8	347.2	171.1	232.7	246.6	338.6	373.4	186.5	98	86.8	106.1	316.8	279.1	622
8.2	17.9	9.6	6.9	19.2	279.2	32.7	18	6.6	25.7	422.6	167.4	45.3	368.7	0	168.3	155.2	6.3	7.1	169.9	126.2	31.3	65.8	11.9	6.5	5.7	7.7	10.7	23.3	203.4	138.8	184.8	187.3	6.3	528.6	440.5	427.4	282.1	637	106.1	316.8
174.6	186.2	175.9	173.3	193.4	233	196.6	186.7	172.9	196.5	282.6	0.95	151	235	168.3	0	61.6	172	166.1	2.7	290.1	195.1	229.7	179.6	172.1	171.4	173.7	176.4	192.2	159	106.2	17.4	101.4	172	388.5	300.4	287.2	233.9	496.9	282.1	637
161.5	161.6	163.1	160.2	180.4	188.3	183.6	165.1	160	153.3	306.3	61.7	140.3	252.4	155.2	61.6	0	153.6	147.7	69.9	274	176.7	216.1	161.2	153.7	153	155.3	158	159.8	109.2	46.5	84.9	123.5	153.6	402.6	314.5	301.3	190.7	511	233.9	496.9
2.2	22.5	3.6	0.93	15.2	283.9	22.6	24.3	1.3	30.3	427.3	172.1	39.7	373.4	6.3	172	153.6	0	10	174.3	130.7	29.8	70.3	18.8	0.52	2	8.3	4.6	29.7	207.9	143.3	189.4	191.8	1.1	533.2	445	431.9	286.6	641.5	190.7	511
11.7	25	13.2	10.4	22.8	276.2	38.2	27.3	10.1	34.7	421.4	166.2	36.7	367.5	7.1	166.1	147.7	10	0	170.2	134.7	40.5	74.3	14.7	13.5	12.8	22.9	17.8	30.6	199.9	139.1	185.2	187.6	13.4	529	440.8	427.7	278.6	637.4	286.6	641.5
176.1	187.7	177.5	174.8	195	234.5	198.2	188.2	174.4	198.1	282	2.1	152.5	241.9	169.9	2.7	69.9	174.3	170.2	0	292.4	197.3	231.9	181.8	174.4	173.6	175.9	178.6	194.4	161.2	108.5	16.2	99.6	174.2	387.3	299.1	286	236.2	495.7	278.6	637.4
119.8	141.3	123.8	121.6	107.4	395.2	110.7	144.1	121.3	146.2	545.4	290.2	168.4	491.5	126.2	290.1	274	130.7	134.7	292.4	0	135.7	92.8	139.9	132.5	131.7	124.1	125.9	149.8	320.2	262.1	308.2	312.8	132.3	651.9	563.8	550.6	398.9	760.3	236.2	495.7
27.6	11.7	37.3	34.9	37.6	264.6	40.8	10.8	34.8	8.5	425.5	195.2	73.1	354.1	31.3	195.1	176.7	29.8	40.5	197.3	135.7	0	75	16.6	31.7	33.6	22.1	37.1	9.9	190.3	120.2	213.6	216	28.9	511.1	444.1	430.9	269	640.6	398.9	760.3
73.4	80.8	63.3	70.7	47	334.8	41.8	81.6	70.4	85.8	485	229.8	108	431.1	65.8	229.7	216.1	70.3	74.3	231.9	92.8	75	0	80.5	72	71.2	75.8	76.2	81.8	259.7	199.6	248.7	252.3	71.8	591.4	503.2	490.1	338.4	699.8	269	640.6
21	9.3	24.3	19.2	30.7	267.5	45	8.5	18.9	17.1	434.9	179.7	51.9	357	11.9	179.6	161.2	18.8	14.7	181.8	139.9	16.6	80.5	0	18.4	17.6	14	22.6	14.6	191.3	138	196.7	201.5	18.2	512.1	445.1	432	270	648.9	338.4	699.8
2.7	23	3.1	1.4	15.7	284.1	23.1	24.5	1.8	30.8	427.4	172.3	39.8	373.5	6.5	172.1	153.7	0.52	13.5	174.4	132.5	31.7	72	18.4	0	2.4	8.6	4	30.1	208.1	143.5	189.6	194.2	1.5	533.3	445.2	432.1	286.8	641.7	270	648.9
2.7	20.6	4.3	1.4	13.3	283.3	20.8	23.7	1.1	28.5	426.7	171.5	43.6	372.8	5.7	171.4	153	2	12.8	173.6	131.7	33.6	71.2	17.6	2.4	0	6.4	5.3	27.9	207.3	142.7	188.8	193.5	0.93	532.6	444.4	431.3	286	640.9	286.8	641.7
6	14.7	10	7.8	16.4	282.2	23.9	19.6	7.5	22.5	428.9	173.8	52.9	375.1	7.7	173.7	155.3	8.3	22.9	175.9	124.1	22.1	75.8	14	8.6	6.4	0	9.9	21.9	204.8	146.5	192.6	195	7.4	535.1	447	433.8	283.5	644.7	1098.1	1459.5
6	24.1	1.7	4	18.2	288.3	25.6	28.5	4.6	31.9	431.7	176.5	42.5	377.8	10.7	176.4	158	4.6	17.8	178.6	125.9	37.1	76.2	22.6	4	5.3	9.9	0	31.3	212.1	147.5	193.6	176.6	4.5	537.3	449.2	436.1	290.8	645.7	286	640.9
27.5	10	31.4	29.1	37.9	257.7	54.9	6.9	28.9	2.6	418.6	196.2	74.1	347.2	23.3	192.2	159.8	29.7	30.6	194.4	149.8	9.9	81.8	14.6	30.1	27.9	21.9	31.3	0	181.2	121.1	212.8	215.2	28.9	501.9	435	421.8	259.8	631.5	283.5	644.7
209.6	190	212.3	208.3	222.1	118.9	225.3	186.8	208	181.5	251.9	159.1	197.6	171.1	203.4	159	109.2	207.9	199.9	161.2	320.2	190.3	259.7	191.3	208.1	207.3	204.8	212.1	181.2	0	87.3	173.8	229.2	207.9	336.8	269.8	256.6	106.1	466.3	290.8	645.7
145	129.9	146.5	143.8	163.9	166	167.2	133.5	143.4	121.6	302	106.4	116.1	232.7	138.8	106.2	46.5	143.3	139.1	108.5	262.1	120.2	199.6	138	143.5	142.7	146.5	147.5	121.1	87.3	0	123.6	158	145.1	397.2	319.2	306	168.4	515.7	259.8	631.5
191.5	202.7	192.5	195.8	216	246.4	213.2	203.2	189.4	213	274.8	16.2	168.6	246.6	184.8	17.4	84.9	189.4	185.2	16.2	308.2	213.6	248.7	196.7	189.6	188.8	192.6	193.6	212.8	173.8	123.6	0	107	189.5	379.6	291.5	278.4	248.7	488	106.1	466.3
193.5	207.4	197.2	192.2	214.7	308	217.9	207.9	191.9	215.5	382.2	101	133.3	338.6	187.3	101.4	123.5	191.8	187.6	99.6	312.8	216	252.3	201.5	194.2	193.5	195	176.6	215.2	229.2	158	107	0	194.7	473.8	385.7	372.5	314.3	582.2	168.4	515.7
1.8	21.6	3.4	0.49	14.3	283.9	21.7	24.3	0.11	29.4	427.3	172.1	40.8	373.4	6.3	172	153.6	1.1	13.4	174.2	132.3	28.9	71.8	18.2	1.5	0.93	7.4	4.5	28.9	207.9	145.1	189.5	194.7	0	533.1	445	431.9	286.6	641.5	248.7	488
535.1	510.8	536.5	533.8	554	279.9	557	507.5	533.3	502.5	117	393.6	513.6	186.5	528.6	388.5	402.6	533.2	529	387.3	651.9	511.1	591.4	512.1	533.3	532.6	535.1	537.3	501.9	336.8	397.2	379.6	473.8	533.1	0	142.1	119.3	282.3	279.1	314.3	582.2
505.1	458.4	448.2	445.5	465.7	211.1	468.9	440.5	445.1	435.2	31.6	305.5	425.4	98	440.5	300.4	314.5	445	440.8	299.1	563.8	444.1	503.2	445.1	445.2	444.4	447	449.2	435	269.8	319.2	291.5	385.7	445	142.1	0	33.2	197.6	245.5	286.6	641.5
433.6	445.2	435	432.3	452.5	199.9	455.7	427.4	432	422.1	3.8	292.3	412.3	86.8	427.4	287.2	301.3	431.9	427.7	286	550.6	430.9	490.1	432	432.1	431.3	433.8	436.1	421.8	256.6	306	278.4	372.5	431.9	119.3	33.2	0	187.5	235.1	282.3	279.1
288.3	268.7	289.7	287	300.8	5	304	265.4	286.7	260.1	185.9	234.1	279.1	106.1	282.1	233.9	190.7	286.6	278.6	236.2	398.9	269	338.4	270	286.8	286	283.5	290.8	259.8	106.1	168.4	248.7	314.3	286.6	282.3	197.6	187.5	0	429.2	197.6	245.5
643.3	655	644.7	642	662.1	462.7	665.4	637.1	641.7	632	240.5	495.6	622	316.8	637	496.9	511	641.5	637.4	495.7	760.3	640.6	699.8	648.9	641.7	640.9	644.7	645.7	631.5	466.3	515.7	488	582.2	641.5	279.1	245.5	235.1	429.2	0	187.5	235.1
];
city_location=[118.203281	39.833897
118.232289	39.680971
118.182889	39.858842
118.186542	39.835062
118.338483	39.838004
116.632133	38.089149
118.384782	39.886585
118.175344	39.64148
118.186076	39.82979
118.19697	39.608154
114.648207	38.046052
116.307362	39.831849
116.278919	39.895055
115.562982	38.027766
118.15575	39.794981
116.313586	39.834177
116.833634	39.565818
118.177605	39.834045
118.099902	39.795561
116.288676	39.828889
119.500798	39.935206
118.284038	39.640467
118.705805	40.018191
118.161598	39.704451
118.183721	39.842809
118.188498	39.824103
118.208462	39.782941
118.194767	39.864396
118.204273	39.613965
116.765458	38.769865
117.097899	39.327316
116.190207	39.838766
116.817919	40.387825
118.186247	39.830996
114.645271	37.115278
114.800031	37.919106
114.665287	38.024941
116.598913	38.066727
112.613411	37.757471
];
value_final=[5	0.4186
750	0.74631024
35	19.721
0.5	0.0216
850	6.94122048
6	0.05308875
55	11.559024
41	11.47608
230	1.203048
69	28.917
2990	14.71725
100	9.072E-10
245	0.643684
230	29.00205
120	21.088964
3	1.0125
10	0.20475
0.1	0.003816
33	19.735065
3	0.267
0.1	0.039375
0.2	0.01074355
275	5.20191225
0.5	0.5991524
10.5	21.97125
79	28.8
160	35
1	24
20.7	10.8
14	3.996783
0.1	0.00274625
19.5	0.4032
0.1	0.000847
32	22.3685
192	4.10205
60	1.77
55	0.88
2240	27.3
];
%第一列为重量，第二列为体积
daijia =[5	0.182
750	0.53156
35	7.77
0.5	0.012
850	3.33072
6	0.02475
55	4.4595
41	4.83
230	0.9114
69	11.9
2990	6.33
100	0.000000648
245	0.899
230	11.9691
120	8.7688
3	0.5
10	0.1575
0.1	0.0018
33	7.6755
3	0.12
0.1	0.04375
0.2	0.01315
275	2.842575
0.5	0.235818
10.5	9.0675
79	11.136
160	13.75
1	9.5
20.7	4.2
14	1.7172
0.1	0.00325
19.5	0.192
0.1	0.0011
32	9.3375
192	1.7835
60	0.708
55	0.352
2240	14
];
%代价第一列为重量，第二列为底面
lu_number =5;
City_Number=38;         %城市数量
Race_Number=200;        %种群数量
Iteration=200;          %迭代次数
P_Cross=0.6;            %交叉概率
P_Mutation=0.2;         %变异概率
car_loud = 20000;           %车的载重
car_value_fund =500;   %车辆固定成本
sudu = 80;
gongzuoshichang =11;
zuichangjuli = sudu*gongzuoshichang;
car_value_trans=8;      %车辆运输成本
cemian=10.2*3.1;
cheshuju=[car_loud cemian car_value_fund car_value_trans zuichangjuli];
cangku =0.3;            %仓库成本
car_chang = 6.8;           %车的长
car_kuan = 2.4;           %车的宽
car_gao = 2.7;           %车的高

car_rongji = 40;           %车的容积
zhong=[[5;750;35;0.500000000000000;850;230;6;55;41;230;69;2990;100;245;230;120;3;10;0.00950000000000000;33;3;0.0800000000000000;0.200000000000000;275;0.500000000000000;641;10.5000000000000;79;160;1;20.7000000000000;14;0.0500000000000000;19.5000000000000;0.0785000000000000;32;192;60;55;2240]]
race=zeros(Race_Number,City_Number+lu_number);
race_best=[];
dai_best=[];
daijiadangqian=inf;
for i=1:Race_Number                         %初始化种群
    temp=randperm(City_Number)+1;
    route=[1,temp,1,1,1,1];
   
    race(i,:)=route;
end
for t=1:Iteration
    adaptation=ga_adaptation(race,city_distance,daijia,cheshuju);
    race=ga_choose(race,adaptation);
    race=ga_cross(race,P_Cross,lu_number);
    race=ga_mutation(race,P_Mutation);
    race=ga_exchange(race,P_Cross);
    race=ga_invert(race,P_Cross);
    [path,val]=ga_plot(race,city_location,city_distance,daijia,cheshuju);
    best_path=path;
    best_value=val;
    if  best_value<daijiadangqian
        race_best = best_path;
        dai_best=[dai_best,best_value];
        daijiadangqian=best_value;
    else
        dai_best=[dai_best,daijiadangqian];
    end
    %pause(0.1);
end
pinggu =[];
figure
plot(dai_best);
danrace = race_best;
cc =length(danrace);
danra_s = find(danrace==1);
pinci = length(danra_s)-1;
if danra_s(1)~=1
     r_new =[danrace(danra_s(1):cc),danrace(1:danra_s(1)-1)];
else
     r_new =danrace;
end
danra_s = find(r_new==1);
if danra_s(pinci+1)~=1
    for j=1:pinci%衡量各段代价
        if danra_s(j) ==danra_s(j+1)-1
        else
             r_n = r_new(danra_s(j)+1:danra_s(j+1)-1);
             [val] = ga_val( r_n-1,daijia,cheshuju,value_final);
             pinggu =[pinggu;val];
             lujing =[1,r_n,1];
             figure
             [a,b] = ga_plot(lujing,city_location,city_distance,daijia,cheshuju );
             
        end
        
        
    end
    if danra_s(pinci+1)~=cc
             r_n = r_new(danra_s(pinci+1)+1:cc);
             [val] = ga_val(r_n-1,daijia,cheshuju,value_final);
             pinggu =[pinggu;val];
             lujing =[1,r_n,1];
             figure
             [a,b] = ga_plot(lujing,city_location,city_distance,daijia,cheshuju );
             
     end
else
    r_n = r_new(danra_s(lu_number)+1:cc);
    [val] = ga_val(r_n-1,daijia,cheshuju,value_final);
             pinggu =[pinggu;val];
    lujing =[1,r_n,1];
    [a,b] = ga_plot(lujing,city_location,city_distance,daijia,cheshuju );    
end
toc
%%
function [val] = ga_val(race,daijia,cheshuju,value_final)
%第一个值为载重，第二个值为体积，车辆数目
val = zeros(1,3);
k=value_final(race,1);
val(1)=sum(k);
val(2)=sum(value_final(race,2));
mianji = sum(daijia(race,2));
zhong = sum(daijia(race,1));
ch1 = ceil(mianji/cheshuju(2));
ch2 = ceil(zhong/cheshuju(1));
car = max(ch1,ch2);
val(3)=car;
end
function [ adaptation ] = ga_adaptation( race,city_distance,daijia,cheshuju)
[m,n]=size(race);
adaptation_1=zeros(1,m);
for i=1:m
    path1=0;
    path2=0;
    danrace = race(i,:);
    cc =length(danrace);
    danra_s = find(danrace==1);
    pinci = length(danra_s)-1;
    if danra_s(1)~=1
        r_new =[danrace(danra_s(1):cc),danrace(1:danra_s(1)-1)];
    else
        r_new =danrace;
    end
    danra_s = find(r_new==1);
    if danra_s(pinci+1)~=1
    for j=1:pinci%衡量各段代价
        if danra_s(j) ==danra_s(j+1)-1
%             path1=path1;
%             path2=path2;
        else
             r_n = r_new(danra_s(j)+1:danra_s(j+1)-1);
             r_n1=r_n-1;
             mianji = sum(daijia(r_n1,2));
             zhong = sum(daijia(r_n1,1));
             ch1 = ceil(mianji/cheshuju(2));
             ch2 = ceil(zhong/cheshuju(1));
             car = max(ch1,ch2);
             lujing =[1,r_n,1];
             lu_len = length(lujing)-1;
             changdu=0;
             for k =1:lu_len
                 changdu = city_distance(lujing(k),lujing(k+1))+changdu;
             end
             if changdu>cheshuju(5)
                  path1 = path1+100000000;
             end
              path1=changdu*car*cheshuju(4)+path1;
              path2=car*cheshuju(3)+path2;
        end
        if danra_s(pinci+1)~=cc
            r_n = r_new(danra_s(pinci+1)+1:cc);
             r_n1=r_n-1;
             mianji = sum(daijia(r_n1,2));
             zhong = sum(daijia(r_n1,1));
             ch1 = ceil(mianji/cheshuju(2));
             ch2 = ceil(zhong/cheshuju(1));
             car = max(ch1,ch2);
             lujing =[1,r_n,1];
             lu_len = length(lujing)-1;
             changdu=0;
             for k =1:lu_len
                 changdu = city_distance(lujing(k),lujing(k+1))+changdu;
             end
              path1=changdu*car*cheshuju(4)+path1;
              path2=car*cheshuju(3)+path2;
        end
        
    end
    
    else
         r_n = r_new(danra_s(4)+1:cc);
         r_n1=r_n-1;
             mianji = sum(daijia(r_n1,2));
             zhong = sum(daijia(r_n1,1));
             ch1 = ceil(mianji/cheshuju(2));
             ch2 = ceil(zhong/cheshuju(1));
             car = max(ch1,ch2);
             lujing =[1,r_n,1];
             lu_len = length(lujing)-1;
             changdu=0;
             for k =1:lu_len
                 changdu = city_distance(lujing(k),lujing(k+1))+changdu;
             end
              path1=changdu*car*cheshuju(4)+path1;
              path2=car*cheshuju(3)+path2;
    end
    adaptation_1(i)=path1+path2;
    
end
adaptation = adaptation_1;
end
function [ race_new ] = ga_select( race,adaptation )
%赌轮盘选择
[m,n]=size(race);
race_new=zeros(m,n);
total=sum(adaptation);
probability=zeros(1,m);
wheel=zeros(1,m+1);
for i=1:m
    probability(i)=adaptation(i)/total;
    if(i==1)
        wheel(i+1)=probability(i);
    else
        wheel(i+1)=wheel(i)+probability(i);
    end
end
for i=1:m
    temp=rand;
    for j=1:m
        if(temp>=wheel(j)&&temp<=wheel(j+1))
            race_new(i,:)=race(j,:);
        end
    end
end
end
function [ best_path,val ] = ga_plot( race,city_location,city_distance,daijia,cheshuju )
    
    [m,n]=size(race);
    point=zeros(n,2);
    adaptation=ga_adaptation(race,city_distance,daijia,cheshuju);
    [val,index]=min(adaptation);
    best_path=race(index,:);
    for i=1:n
        point(i,:)=city_location(best_path(i),:);
    end
    plot(point(:,1),point(:,2),'-o',point(:,1),point(:,2),'r.');
    yyy = length(best_path);
    for lu =1:yyy
        text(point(lu,1),point(lu,2),num2str(best_path(lu)))
    end
end
function [ race_new ] = ga_mutation( race,P_Mutation )
%变异
%随机取两点，交换两点基因型
[m,n]=size(race);
race_new=race;
for i=1:m
    flag=rand;
    if(flag<=P_Mutation)
        list=randperm(n);
        temp=race_new(i,list(1));
        race_new(i,list(1))=race_new(i,list(2));
        race_new(i,list(2))=temp;
    end
end
end
function [ race_new ] = ga_invert( race,P_Cross )
%倒序
%随机取两点，逆转两点之间的基因排列
[m,n]=size(race);
race_new=race;
for i=1:m
    flag=rand;
    if(flag<P_Cross)
        temp=race_new(i,:);
        list=randperm(n);
        if(list(1)>list(2))
            start=list(2);
            finish=list(1);
        else
            start=list(1);
            finish=list(2);
        end
        temp_1=temp(1:1:start-1);
        temp_2=temp(finish:-1:start);
        temp_3=temp(finish+1:end);
        temp=[temp_1,temp_2,temp_3];
        race_new(i,:)=temp;
    end
end

end

function [ race_new ] = ga_exchange( race,P_Cross )
%ga_exchange实现随机取某一基因点，交换该点和紧跟后面一点的基因型
[m,n]=size(race);
race_new=race;
for i=1:m
    flag=rand;
    if(flag<P_Cross)
      list=randperm(n-1);
      temp=race_new(i,list(1));
      race_new(i,list(1))=race_new(i,list(1)+1);
      race_new(i,list(1)+1)=temp;
    end
end
end

function [ race_new ] = ga_cross( race,P_Cross,lu_number)
%顺序交叉
k=race(1,1);
[m,n]=size(race);
race=race(1:m,1:n);
[m,n]=size(race);
race_new=race;
for i=1:m-1
    flag=rand;%判断是否进行交叉
    if(flag<=P_Cross)
        list=randperm(n-1);
        Cross_Node=list(1);%寻找拼合点
        parent_1=race_new(i,:);
        parent_2=race_new(i+1,:);%挑选一对父母
        s1 = parent_1(1:Cross_Node);
        chuxian = sum(s1(s1==1));
        res1 = setdiff(parent_2, s1, 'stable');
        child=[s1,res1];
        dai = lu_number-chuxian;
        ZS = lu_number-1;
        if dai>ZS
            dai =ZS;
        end
        while dai>0
            t =length(child);
            list=randperm(t-1);
            Cross_Node=list(1);%寻找拼合点
            child =[child(1:Cross_Node),1,child(Cross_Node+1:t)];
            dai = dai-1;
        end
        race_new(i,:)=child;
    end
end

end

function [ race_new ] = ga_choose( race,adaptation )
%精英选择策略
%随机取种群的1/10，保留最优值，循环m次，competition_number可根据需要调整
[m,n]=size(race);
race_new=zeros(m,n);
competition_number=floor(m/10);
for i=1:m
    competition=zeros(1,competition_number);
    temp=randperm(m);
    for j=1:competition_number
        competition(1,j)=adaptation(temp(j));
    end
    [val,index]=min(competition);
    race_new(i,:)=race(temp(index),:);
end
end

